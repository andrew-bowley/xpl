/* Generated By:JavaCC: Do not edit this line. QueryParserConstants.java */
package au.com.cybersearch2.classy_logic.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface QueryParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER = 6;
  /** RegularExpression Id. */
  int DOUBLE = 7;
  /** RegularExpression Id. */
  int DECIMAL = 8;
  /** RegularExpression Id. */
  int BOOLEAN = 9;
  /** RegularExpression Id. */
  int STRING = 10;
  /** RegularExpression Id. */
  int TEMPLATE = 11;
  /** RegularExpression Id. */
  int AXIOM = 12;
  /** RegularExpression Id. */
  int REGEX = 13;
  /** RegularExpression Id. */
  int INCLUDE = 14;
  /** RegularExpression Id. */
  int SCOPE = 15;
  /** RegularExpression Id. */
  int QUERY = 16;
  /** RegularExpression Id. */
  int CALC = 17;
  /** RegularExpression Id. */
  int LIST = 18;
  /** RegularExpression Id. */
  int LENGTH = 19;
  /** RegularExpression Id. */
  int TERM = 20;
  /** RegularExpression Id. */
  int RESOURCE = 21;
  /** RegularExpression Id. */
  int CURRENCY = 22;
  /** RegularExpression Id. */
  int FORMAT = 23;
  /** RegularExpression Id. */
  int LOCAL = 24;
  /** RegularExpression Id. */
  int CHOICE = 25;
  /** RegularExpression Id. */
  int PARAMETER = 26;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 27;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 28;
  /** RegularExpression Id. */
  int HEX_LITERAL = 29;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 30;
  /** RegularExpression Id. */
  int NUMBER_LITERAL = 31;
  /** RegularExpression Id. */
  int EXPONENT = 32;
  /** RegularExpression Id. */
  int STRING_LITERAL = 33;
  /** RegularExpression Id. */
  int TRUE = 34;
  /** RegularExpression Id. */
  int FALSE = 35;
  /** RegularExpression Id. */
  int NULL = 36;
  /** RegularExpression Id. */
  int NAN = 37;
  /** RegularExpression Id. */
  int IDENTIFIER = 38;
  /** RegularExpression Id. */
  int LPAREN = 39;
  /** RegularExpression Id. */
  int RPAREN = 40;
  /** RegularExpression Id. */
  int LBRACE = 41;
  /** RegularExpression Id. */
  int RBRACE = 42;
  /** RegularExpression Id. */
  int LBRACKET = 43;
  /** RegularExpression Id. */
  int RBRACKET = 44;
  /** RegularExpression Id. */
  int SEMICOLON = 45;
  /** RegularExpression Id. */
  int COMMA = 46;
  /** RegularExpression Id. */
  int DOT = 47;
  /** RegularExpression Id. */
  int ASSIGN = 48;
  /** RegularExpression Id. */
  int GT = 49;
  /** RegularExpression Id. */
  int LT = 50;
  /** RegularExpression Id. */
  int BANG = 51;
  /** RegularExpression Id. */
  int COLON = 52;
  /** RegularExpression Id. */
  int EQ = 53;
  /** RegularExpression Id. */
  int LE = 54;
  /** RegularExpression Id. */
  int GE = 55;
  /** RegularExpression Id. */
  int NE = 56;
  /** RegularExpression Id. */
  int SC_OR = 57;
  /** RegularExpression Id. */
  int SC_AND = 58;
  /** RegularExpression Id. */
  int INCR = 59;
  /** RegularExpression Id. */
  int DECR = 60;
  /** RegularExpression Id. */
  int PLUS = 61;
  /** RegularExpression Id. */
  int MINUS = 62;
  /** RegularExpression Id. */
  int STAR = 63;
  /** RegularExpression Id. */
  int SLASH = 64;
  /** RegularExpression Id. */
  int BIT_AND = 65;
  /** RegularExpression Id. */
  int BIT_OR = 66;
  /** RegularExpression Id. */
  int XOR = 67;
  /** RegularExpression Id. */
  int REM = 68;
  /** RegularExpression Id. */
  int PLUSASSIGN = 69;
  /** RegularExpression Id. */
  int MINUSASSIGN = 70;
  /** RegularExpression Id. */
  int STARASSIGN = 71;
  /** RegularExpression Id. */
  int SLASHASSIGN = 72;
  /** RegularExpression Id. */
  int ANDASSIGN = 73;
  /** RegularExpression Id. */
  int ORASSIGN = 74;
  /** RegularExpression Id. */
  int XORASSIGN = 75;
  /** RegularExpression Id. */
  int REMASSIGN = 76;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "\"integer\"",
    "\"double\"",
    "\"decimal\"",
    "\"boolean\"",
    "\"string\"",
    "\"template\"",
    "\"axiom\"",
    "\"regex\"",
    "\"include\"",
    "\"scope\"",
    "\"query\"",
    "\"calc\"",
    "\"list\"",
    "\"length\"",
    "\"term\"",
    "\"resource\"",
    "\"currency\"",
    "\"format\"",
    "\"local\"",
    "\"choice\"",
    "\"parameter\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<NUMBER_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "\"NaN\"",
    "<IDENTIFIER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\"+=\"",
    "\"-=\"",
    "\"*=\"",
    "\"/=\"",
    "\"&=\"",
    "\"|=\"",
    "\"^=\"",
    "\"%=\"",
    "\">>\"",
    "\"?\"",
    "\"~\"",
  };

}
