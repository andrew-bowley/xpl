// Code generated by dagger-compiler.  Do not edit.
package au.com.cybersearch2.classy_logic.tutorial14;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<HighCitiesSorted>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code HighCitiesSorted} and its
 * dependencies.
 *
 * Being a {@code Provider<HighCitiesSorted>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<HighCitiesSorted>} and handling injection
 * of annotated fields.
 */
public final class HighCitiesSorted$$InjectAdapter extends Binding<HighCitiesSorted>
    implements Provider<HighCitiesSorted>, MembersInjector<HighCitiesSorted> {
  private Binding<au.com.cybersearch2.classy_logic.ProviderManager> providerManager;

  public HighCitiesSorted$$InjectAdapter() {
    super("au.com.cybersearch2.classy_logic.tutorial14.HighCitiesSorted", "members/au.com.cybersearch2.classy_logic.tutorial14.HighCitiesSorted", NOT_SINGLETON, HighCitiesSorted.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    providerManager = (Binding<au.com.cybersearch2.classy_logic.ProviderManager>) linker.requestBinding("au.com.cybersearch2.classy_logic.ProviderManager", HighCitiesSorted.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(providerManager);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<HighCitiesSorted>}.
   */
  @Override
  public HighCitiesSorted get() {
    HighCitiesSorted result = new HighCitiesSorted();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<HighCitiesSorted>}.
   */
  @Override
  public void injectMembers(HighCitiesSorted object) {
    object.providerManager = providerManager.get();
  }

}
